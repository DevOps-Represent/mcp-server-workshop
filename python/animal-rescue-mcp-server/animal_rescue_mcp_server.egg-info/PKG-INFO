Metadata-Version: 2.4
Name: animal-rescue-mcp-server
Version: 1.0.0
Summary: Animal Rescue MCP Server
Author-email: Animal Rescue Team <team@animalrescue.example>
Project-URL: Homepage, https://github.com/DevOps-Represent/mcp-server-workshop
Project-URL: Repository, https://github.com/DevOps-Represent/mcp-server-workshop
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: mcp>=1.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: typing-extensions>=4.0.0
Provides-Extra: dev
Requires-Dist: black>=25.0.0; extra == "dev"
Requires-Dist: isort>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"

# Animal Rescue MCP Server (Python)

A Python implementation of the Animal Rescue MCP (Model Context Protocol) Server, translated from the original TypeScript version.

## Overview

This MCP server provides tools for managing animal adoptions at an animal rescue facility. It includes functionality to:

- List available animals for adoption
- Get animal details by ID or name
- Process pet adoptions

## Features

- **List Animals**: Get all available animals for adoption
- **Get Animal by ID**: Retrieve specific animal information using their unique ID
- **Get Animal by Name**: Find animals by their name (case-insensitive search)
- **Adopt Pet**: Process pet adoptions and generate adoption certificates

## Installation

1. Install the required dependencies:
```bash
python3 -m pip install -r requirements.txt
```

2. Or install using pip in development mode:
```bash
python3 -m pip install -e .
```

## Usage

Run the MCP server:
```bash
python3 -m src.main
```

Or using the installed script:
```bash
animal-rescue-mcp
```

## Project Structure

```
src/
├── __init__.py              # Package initialization
├── main.py                  # Main MCP server implementation
├── animal_rescue_service.py # Core business logic and data models
└── animal_data.py          # Sample animal data
```

## Development

### Code Style

This project follows PEP 8 style guidelines and uses:
- Black for code formatting
- isort for import sorting
- mypy for type checking

To format code:
```bash
python3 -m black src/
python3 -m isort src/
```

To run type checking:
```bash
python3 -m mypy src/
```

### Data Models

The project uses TypedDict for data structures to maintain compatibility with the original TypeScript interfaces while providing type safety.

#### Animal
- All animal information including species, breed, age, temperament, and adoption status

#### AdoptionCertificate
- Generated when an adoption is processed, includes timestamp and pickup location

## Notes

This is a scaffolded implementation translated from TypeScript. The actual MCP protocol communication layer would need to be implemented based on your specific MCP framework requirements.

The data is stored in memory for demonstration purposes. In a production environment, this would typically connect to a database through a REST API.
